theme(
axis.text.x = element_text(size = 8, hjust = 0.5, angle = 0),
axis.title.x = element_text(size = 8, color = "black", face = "bold"),
axis.text.y = element_text(size = 8),
axis.title.y = element_text(size = 10, color = "black", face = "bold"),
plot.title = element_text(size = 8, face = "bold", color = "black", hjust = 0.5),
legend.position = element_blank(),
panel.border = element_blank(),
plot.background = element_blank()
)
alert_errorplot
piecewise_case_plot <- (ggplot(data = model_fit_data_piece, aes(x = dates, y = cases))+
geom_rect(aes(xmin=ymd('2022-03-17'), xmax = ymd('2022-05-26'), ymin = 0, ymax = Inf),
fill = adjustcolor("#F7E2E2", alpha = 0.03), alpha = 0.05)
+ geom_bar(data = model_fit_data_piece, aes(x = dates, y = cases, fill = "model estimated cases"),
stat = "identity", position = "stack", width = 0.35, alpha = 1, show.legend = TRUE)
+ geom_bar(data = serop_case_true, aes(x = date, y = cases, fill = "reported cases"),
stat = "identity", position = "stack", width = 0.35, alpha = 1, show.legend = TRUE)
+ geom_line(data = serop_case_true, aes(x = date, y = cases), linewidth = 2.0, show.legend = FALSE)
+ geom_smooth(data = model_fit_data_piece, aes(x = dates, y = cases), color = "red", span = 0.15,
alpha = 0.35, linewidth = 2.0, show.legend = FALSE)
+ geom_ribbon(data = model_fit_data_piece, aes(ymin = conf.low, ymax = conf.high), fill = "gray", alpha = 0.35)
+ scale_fill_manual(labels = c("model estimated cases","reported cases"), values = c("green","steelblue1"))
+ labs(x = "Date (Dec 15, 2021 - May 26, 2022)", y = "Number of Cases",
title = "Estimated Cases Under RT-PCR Eligibility Criteria Changes", color = "")
+ theme_clean()
+ geom_vline(xintercept = as.Date("2021-12-24"), colour = "gold4", linetype = 2, size = 2)
+ geom_vline(xintercept = as.Date("2022-01-08"), colour = "gold4", linetype = 2, size = 2)
+ geom_vline(xintercept = as.Date("2022-02-07"), colour = "gold4", linetype = 2, size = 2)
+ geom_vline(xintercept = as.Date("2022-03-14"), colour = "black", linetype = 1, size = 2)
+ annotate("text", x = as.Date("2021-12-18"), y = 800, label = "ALS-2",
size = 5,angle = 90, hjust = 1, color = "black")
+ annotate("text", x = as.Date("2021-12-28"), y = 800, label = "ALS-3",
size = 5,angle = 90, hjust = 1,color = "black")
+ annotate("text", x = as.Date("2022-01-24"), y = 800, label = "ALS-4",
size = 5,angle = 0, hjust = 1, color = "black")
+ annotate("text", x = as.Date("2022-03-04"), y = 800, label = "Mod-ALS-3",
size = 5,angle = 0, hjust = 1, color = "black")
+ annotate("text", x = as.Date("2022-04-24"), y = 350, label = "No-ALS",
size = 5, hjust = 1, color = "black")
+ theme(axis.text.x = element_text(size = 15, angle = 0, hjust = 0.5),
axis.title.x = element_text(size = 15, color = "black", face = "bold"),
axis.text.y = element_text(size = 15),
axis.title.y = element_text(size = 15, color = "black", face = "bold"),
plot.title = element_text(size = 15, face = "bold", color = "black", hjust = 0.5),
strip.text = element_text(size = 15, face = "bold", color = "black"),
legend.position = "bottom",
legend.title = element_text(size = 0),
legend.text = element_text(size = 15),
legend.background = element_rect(color = NA),
legend.margin = margin(0, 0, 0, 0),
plot.background = element_blank()) +
guides(color = guide_legend(), fill = guide_legend()))
dates <- seq(as.Date("2022-12-15"), by = "day", length.out = nrow(model_fit_data_piece))
tot_obs <- cumsum(serop_case_true$cases)
tot_piecewis_pred <- cumsum(model_fit_data_piece$cases)
# data frame with final totals only ----
final_totals <- data.frame(Group = c("Reported", "Predicted (Model)"),Total_Cases = c(tot_obs[length(tot_obs)],tot_piecewis_pred[length(tot_piecewis_pred)]))
# calculate % difference (observed vs predicted)
piecewise_pct_diff <- abs(round((final_totals$Total_Cases[1] - final_totals$Total_Cases[2]) / final_totals$Total_Cases[2] * 100, 1))
piecewise_cum <- ggplot(final_totals, aes(x = Group, y = Total_Cases, fill = Group)) +
geom_col(width = 0.6, show.legend = FALSE,alpha = 0.35) +
geom_text(aes(label = Total_Cases), vjust = 5.0, size = 3) +
scale_fill_manual(values = c("Predicted (Model)" = "green", "Reported" = "steelblue")) +
labs(title = "Total Infections vrs Reported Cases", x = NULL,y = "Total Cases") + #subtitle = paste0("Predicted is ", piecewise_pct_diff, "% higher than reported"),
theme_clean() +
theme(plot.background = element_rect(fill = "white", color = "black"), # Border
axis.title.x = element_text(size = 8, color = "black", face = "bold"),
axis.title.y = element_text(size = 8, color = "black", face = "bold"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text = element_text(size = 8),
axis.title = element_text(size = 8),
plot.subtitle = element_text(size = 6),
legend.margin = margin(0, 0, 0, 0),
plot.title = element_text(size = 8, face = "bold",hjust = 0.5)
)
# Combine using cowplot and place the inset at a specific position
piecewise_final_plot <- ggdraw() +
draw_plot(piecewise_case_plot, 0, 0, 1, 1) +
draw_plot(piecewise_cum, 0.63, 0.58, 0.28, 0.36)
piecewise_final_plot
# create the inset plot (piecewise_report_prob)
# piecewise_report_prob <- (ggplot(model_fit_data_piece, aes(dates, report_prob)) +
#                           geom_rect(aes(xmin=ymd('2022-03-18'), xmax = ymd('2022-05-26'), ymin = -Inf, ymax = Inf),
#                                       fill = adjustcolor("#F7E2E2", alpha = 0.03), alpha = 0.05)
#                           + geom_line(linewidth = 1.0, color = "red")
#                           + labs(x = "Date", y = "Report Probability", title = "Piecewise Report Probability")
#                           + theme_clean()
#                           + theme(plot.background = element_rect(fill = "white", color = "black"), # Border
#                                   axis.title.x = element_text(size = 12, color = "black", face = "bold"),
#                                   axis.title.y = element_text(size = 12, color = "black", face = "bold"),
#                                   panel.grid.major = element_blank(),
#                                   panel.grid.minor = element_blank(),
#                                   axis.text = element_text(size = 10),
#                                   axis.title = element_text(size = 12),
#                                   legend.margin = margin(0, 0, 0, 0),
#                                   plot.title = element_text(size = 10, face = "bold"))
#                           )
############################### Constant Reporting Probability #######################
constant_case_plot <- (ggplot(data = model_fit_data_const, aes(x = dates, y = cases))+
geom_rect(aes(xmin=ymd('2022-03-17'), xmax = ymd('2022-05-26'), ymin = 0, ymax = Inf),
fill = adjustcolor("#F7E2E2", alpha = 0.03), alpha = 0.05)
+ geom_bar(data = model_fit_data_const, aes(x = dates, y = cases, fill = "model estimated cases"),
stat = "identity", position = "stack", width = 0.35, alpha = 1, show.legend = TRUE)
+ geom_bar(data = serop_case_true, aes(x = date, y = cases, fill = "reported cases"),
stat = "identity", position = "stack", width = 0.35, alpha = 1, show.legend = TRUE)
+ geom_line(data = serop_case_true, aes(x = date, y = cases), span = 0.10, linewidth = 2.0,
show.legend = FALSE)
+ geom_ribbon(data = model_fit_data_const, aes(ymin = pmax(0, cases - 0.25 * sd(cases)),
ymax = cases + 0.25 * sd(cases)), fill = "gray", alpha = 0.35)
+ geom_line(data = model_fit_data_const, aes(x = dates, y = cases), color = "red",
span = 0.15, alpha = 0.7, linewidth = 2.0, show.legend = FALSE)
+ scale_fill_manual(labels = c("model estimated cases","reported cases"), values = c("green","steelblue1"))
+ labs(x = "Date (Dec 15, 2021 - May 26, 2022)", y = "Number of Cases",
title = "Estimated Cases Without RT-PCR Eligibility Criteria Changes", color = "")
+ theme_clean()
+ geom_vline(xintercept = as.Date("2021-12-24"), colour = "gold4", linetype = 2, size = 2)
+ geom_vline(xintercept = as.Date("2022-01-08"), colour = "gold4", linetype = 2, size = 2)
+ geom_vline(xintercept = as.Date("2022-02-07"), colour = "gold4", linetype = 2, size = 2)
+ geom_vline(xintercept = as.Date("2022-03-14"), colour = "black", linetype = 1, size = 2)
+ annotate("text", x = as.Date("2021-12-18"), y = 1000, label = "ALS-2",
size = 5,angle = 90, hjust = 1, color = "black")
+ annotate("text", x = as.Date("2021-12-28"), y = 1500, label = "ALS-3",
size = 5,angle = 90, hjust = 1,color = "black")
+ annotate("text", x = as.Date("2022-02-01"), y = 500, label = "ALS-4",
size = 5,angle = 0, hjust = 1, color = "black")
+ annotate("text", x = as.Date("2022-03-04"), y = 600, label = "Mod-ALS-3",
size = 5,angle = 0, hjust = 1, color = "black")
+ annotate("text", x = as.Date("2022-04-28"), y = 600, label = "No-ALS",
size = 5, hjust = 1, color = "black")
+ theme(axis.text.x = element_text(size = 15, angle = 0, hjust = 0.5),
axis.title.x = element_text(size = 15, color = "black", face = "bold"),
axis.text.y = element_text(size = 15),
axis.title.y = element_text(size = 15, color = "black", face = "bold"),
plot.title = element_text(size = 15, face = "bold", color = "black", hjust = 0.5),
strip.text = element_text(size = 15, face = "bold", color = "black"),
legend.position = "bottom",
legend.title = element_text(size = 0),
legend.text = element_text(size = 15),
legend.background = element_rect(color = NA),
legend.margin = margin(0, 0, 0, 0),
plot.background = element_blank())
+ guides(color = guide_legend(), fill = guide_legend())
)
dates <- seq(as.Date("2022-12-15"), by = "day", length.out = nrow(model_fit_data_const))
tot_obs <- cumsum(serop_case_true$cases)
tot_const_pred <- cumsum(model_fit_data_const$cases)
# data frame with final totals only ----
const_final_totals <- data.frame(Group = c("Reported", "Predicted (Model)"),
Total_Cases = c(tot_obs[length(tot_obs)],tot_const_pred[length(tot_const_pred)]))
# calculate % difference (observed vs predicted)
const_pct_diff <- abs(round((const_final_totals$Total_Cases[1] - const_final_totals$Total_Cases[2]) / const_final_totals$Total_Cases[2] * 100, 1))
const_pct_diff
const_cum <- (ggplot(const_final_totals, aes(x = Group, y = Total_Cases, fill = Group)) +
geom_col(width = 0.6, show.legend = FALSE,alpha = 0.35,color = "black") +
geom_text(aes(label = Total_Cases), vjust = 2.0, size = 3) +
scale_fill_manual(values = c("Predicted (Model)" = "green", "Reported" = "steelblue")) +
labs(title = "Total Infections vrs Reported Cases", x = NULL, y = "Total Cases") +#subtitle = paste0("predicted is ", const_pct_diff, "% higher than reported"),
theme_clean() +
theme(plot.background = element_rect(fill = "white", color = "black"), # Border
axis.title.x = element_text(size = 8, color = "black", face = "bold"),
axis.title.y = element_text(size = 8, color = "black", face = "bold"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text = element_text(size = 8),
axis.title = element_text(size = 8),
plot.subtitle = element_text(size = 6,hjust = 0.95),
legend.margin = margin(0, 0, 0, 0),
plot.title = element_text(size = 8, hjust = 0.5,face = "bold")
))
constant_final_plot <- ggdraw() +
draw_plot(constant_case_plot, 0, 0, 1, 1) +
draw_plot(const_cum, 0.25, 0.66, 0.3, 0.28)
constant_final_plot
# create the inset plot (const_report_prob)
# constant_report_prob <- (ggplot(model_fit_data_const, aes(dates, report_prob))+
#                            geom_rect(aes(xmin=ymd('2022-03-18'), xmax = ymd('2022-05-26'), ymin = 0.95, ymax = 1.0),
#                                      fill = adjustcolor("#F7E2E2", alpha = 0.03), alpha = 0.05)
#                          + geom_line(linewidth = 1.0, color = "red")
#                          + labs(x = "Date", y = "Report Probability", title = "Constant Report Probability")
#                          + theme_clean()
#                          + theme(plot.background = element_rect(fill = "white", color = "black"), # Border
#                                  axis.title.x = element_text(size = 8, color = "black", face = "bold"),
#                                  axis.title.y = element_text(size = 8, color = "black", face = "bold"),
#                                  panel.grid.major = element_blank(),
#                                  panel.grid.minor = element_blank(),
#                                  axis.text = element_text(size = 10),
#                                  axis.title = element_text(size = 10),
#                                  legend.margin = margin(0, 0, 0, 0),
#                                  plot.title = element_text(size = 8, face = "bold"))
#                          )
############################## Seroprevalence Fit ##########################
d1 <- serop_case_true[c("date","cases")]
d1$type <- "data"
colnames(d1) <- c("dates","cases","type")
d2 <- model_fit_data_piece[c("dates","cases")]
d2$type <- "piecewise"
d3 <- model_fit_data_const[c("dates","cases")]
d3$type <- "const"
allcases <- rbind(d1,d2,d3)
# data prep ---
allcases <- allcases %>%
mutate(type = factor(type, levels = c("data", "piecewise", "const")))
# Optional global SD (not used now, but kept if needed)
model_sd <- sd(allcases$cases[allcases$type != "data"])
geom_bar(data = model_fit_data_const, aes(x = dates, y = cases, fill = "model estimated cases"),
stat = "identity", position = "stack", width = 0.35, alpha = 1, show.legend = TRUE)
combined_case_plot <- ggplot(allcases, aes(x = dates)) +
geom_rect(aes(xmin=ymd('2022-03-17'), xmax = ymd('2022-05-26'), ymin = 0, ymax = Inf),
fill = adjustcolor("#F7E2E2", alpha = 0.03), alpha = 0.05) +
geom_bar(data = filter(allcases, type == "const"),
aes(y = cases), fill = "blue", stat = "identity", position = "stack",width = 0.25, alpha = 1) +
geom_bar(data = filter(allcases, type == "piecewise"),
aes(y = cases), fill = "red", stat = "identity",position = "stack", width = 0.25, alpha = 1) +
geom_bar(data = filter(allcases, type == "data"),
aes(y = cases), fill = "darkgreen", stat = "identity",position = "stack", width = 0.25, alpha = 1) +
geom_ribbon(data = filter(allcases, type == "const"), aes(ymin = pmax(0, cases - 0.25 * sd(cases)),
ymax = cases + 0.25 * sd(cases)), fill = "grey", alpha = 0.5)+
geom_ribbon(data = filter(allcases, type == "piecewise"), aes(ymin = pmax(0, cases - 0.25 * sd(cases)),
ymax = cases + 0.25 * sd(cases)), fill = "grey", alpha = 0.5)+
geom_smooth(data = filter(allcases, type == "piecewise"), aes(y = cases, color = "PCR-Elig. Adjusted Cases"),
se = FALSE, span = 0.15, linewidth = 1.5) +
geom_smooth(data = filter(allcases, type == "const"), aes(y = cases, color = "True Infections"),
se = FALSE, span = 0.15, linewidth = 1.5) +
geom_line(data = filter(allcases, type == "data"), aes(y = cases, color = "Reported Cases"),
se = FALSE, span = 0.1, linewidth = 1.5) +
scale_color_manual(name = NULL,
values = c("Reported Cases" = "darkgreen", "PCR-Elig. Adjusted Cases" = "red", "True Infections" = "blue")) +
labs(x = "Date (Dec 15, 2021 - May 26, 2022)",y = "Number of Cases",
title = "Reported vrs Estimated Daily Omicron Infections") +
geom_segment(aes(x = as.Date("2021-12-24"), y = 0, yend = Inf),linetype = "dashed",color = "gold4",
linewidth = 1) +
geom_segment(aes(x = as.Date("2022-01-08"), y = 0, yend = Inf),linetype = "dashed",color = "gold4",
linewidth = 1) +
geom_segment(aes(x = as.Date("2022-02-07"), y = 0, yend = Inf),linetype = "dashed",color = "gold4",
linewidth = 1) +
geom_segment(aes(x = as.Date("2022-03-14"), y = 0, yend = Inf),linetype = "solid",color = "black",
linewidth = 1) +
annotate("text", x = as.Date("2021-12-18"), y = 1000, label = "ALS-2", size = 5, angle = 90, hjust = 1) +
annotate("text", x = as.Date("2021-12-28"), y = 1500, label = "ALS-3", size = 5, angle = 90, hjust = 1) +
annotate("text", x = as.Date("2022-01-30"), y = 1200, label = "ALS-4", size = 5, hjust = 1) +
annotate("text", x = as.Date("2022-03-04"), y = 1200, label = "Mod-ALS-3", size = 5, hjust = 1) +
annotate("text", x = as.Date("2022-04-28"), y = 1000, label = "No-ALS", size = 5, hjust = 1) +
theme_clean() +
theme(
axis.text.x = element_text(size = 15),
axis.title.x = element_text(size = 15, face = "bold"),
axis.text.y = element_text(size = 15),
axis.title.y = element_text(size = 15, face = "bold"),
plot.title = element_text(size = 15, face = "bold", hjust = 0.5),
legend.position = "bottom",
legend.text = element_text(size = 15),
legend.background = element_rect(color = NA),
plot.background = element_blank()
)
# inset cumulative totals ---
tot_obs <- allcases %>% filter(type == "data") %>% summarise(total = sum(cases)) %>% pull(total)
tot_piecewise <- allcases %>% filter(type == "piecewise") %>% summarise(total = sum(cases)) %>% pull(total)
tot_const <- allcases %>% filter(type == "const") %>% summarise(total = sum(cases)) %>% pull(total)
# data for bar plot
const_final_totals <- data.frame(Group = c("Reported\nCases", "PCR-Elig.\nAdjusted Cases", "True\nInfections"),Total_Cases = c(tot_obs, tot_piecewise, tot_const))
# inset plot
const_cum <- ggplot(const_final_totals, aes(x = Group, y = Total_Cases, fill = Group)) +
geom_col(width = 0.6, alpha = 0.35, color = "black", show.legend = FALSE) +
geom_text(aes(label = Total_Cases), vjust = 2.0, size = 4) +
scale_fill_manual(values = c("Reported\nCases" = "darkgreen", "PCR-Elig.\nAdjusted Cases" = "red", "True\nInfections" = "blue")) +
labs(title = "Total Infections: Reported vs Estimated", x = NULL, y = "Total Cases") +
theme_clean() +
theme(
plot.background = element_rect(fill = "white", color = "black"),
axis.title.x = element_text(size = 10, face = "bold"),
axis.title.y = element_text(size = 10, face = "bold"),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
axis.text = element_text(size = 10),
plot.title = element_text(size = 10, face = "bold", hjust = 0.5),
plot.subtitle = element_text(size = 10, hjust = 0.95)
)
# combine plots ---
final_combined_plot <- ggdraw() +
draw_plot(combined_case_plot, 0, 0, 1, 1) +
draw_plot(const_cum, 0.23, 0.66, 0.3, 0.28)
final_combined_plot
seroprevalence_plot <- (ggplot(data = model_fit_data_piece, aes(x = dates, y = serop))+
geom_rect(aes(xmin=ymd('2022-03-17'), xmax = ymd('2022-05-26'), ymin = 0, ymax = 0.35),
fill = adjustcolor("#F7E2E2", alpha = 0.03), alpha = 0.05)
+ geom_point(data = serop_case_true, aes(x = date, y = seroprevalence, color = "seroprevalence estimate"),
span = 0.50, linewidth = 2)
+ geom_smooth(data = model_fit_data_piece, aes(x = dates, y = serop, color = "model fit"),
span = 0.10, alpha = 0.7, linewidth = 2)
+ scale_color_manual(labels = c("model fit","seroprevalence estimate"), values = c("#00BFC4","black"))
+ labs(x = "Date (Dec 15, 2021 - May 26, 2022)", y = "Seroprevalence Estimate (%)",
title = "Seroprevalence Fit", color = "")
+ theme_clean()
+ geom_vline(xintercept = as.Date("2021-12-24"), colour = "gold4", linetype = 2, size = 1)
+ geom_vline(xintercept = as.Date("2022-01-08"), colour = "gold4", linetype = 2, size = 1)
+ geom_vline(xintercept = as.Date("2022-02-07"), colour = "gold4", linetype = 2, size = 1)
+ geom_vline(xintercept = as.Date("2022-03-14"), colour = "black", linetype = 1, size = 1)
+ annotate("text", x = as.Date("2021-12-18"), y = 0.15, label = "ALS-2",
size = 5,angle = 90, hjust = 1, color = "black")
+ annotate("text", x = as.Date("2021-12-28"), y = 0.15, label = "ALS-3",
size = 5,angle = 90, hjust = 1,color = "black")
+ annotate("text", x = as.Date("2022-02-01"), y = 0.20, label = "ALS-4",
size = 5,angle = 0, hjust = 1, color = "black")
+ annotate("text", x = as.Date("2022-03-04"), y = 0.20, label = "Mod-ALS-3",
size = 5,angle = 0, hjust = 1, color = "black")
+ annotate("text", x = as.Date("2022-04-28"), y = 0.15, label = "No-ALS",
size = 5, hjust = 1, color = "black")
+ theme(axis.text.x = element_text(size = 15, angle = 0, hjust = 0.5),
axis.title.x = element_text(size = 15, color = "black", face = "bold"),
axis.text.y = element_text(size = 15),
axis.title.y = element_text(size = 15, color = "black", face = "bold"),
plot.title = element_text(size = 15, face = "bold", color = "black", hjust = 0.5),
strip.text = element_text(size = 15, face = "bold", color = "black"),
legend.position = c(0.35,0.75),
legend.title = element_text(size = 0),
legend.text = element_text(size = 15),
legend.background = element_rect(color = NA),
legend.margin = margin(0, 0, 0, 0),
plot.background = element_blank())
+guides(color = guide_legend(), fill = guide_legend())
)
seroprevalence_plot
### EpiEstim - Estimate Rt on a sliding weekly window using a parametric serial interval ###
# Now that we have an incidence object we need to supply `EpiEstim` with the SI distribution.
# As explained above, when we estimate Rt using a parametric SI distribution we only need to
# supply a mean and standard deviation.
# Omicron's  serial interval distribution is 3.5 and that the SD is 2.4 using an estimate
incidence_df <- data.frame(date = model_fit_data_const$dates, I = model_fit_data_const$cases)
# estimate Rt using EpiEstim
n_days <- length(model_fit_data_const$dates)
config <- make_config(list(
mean_si = 3.5,
std_si = 2.4,
t_start = seq(2, n_days - 6),
t_end = seq(8, n_days)
))
res <- estimate_R(incid = incidence_df, method = "parametric_si", config = config)
# intervention periods
interventions <- data.frame(
period = c("ALS-2", "ALS-3", "ALS-4","Mod-ALS-3","No-ALS"),
start = as.Date(c("2021-12-15", "2021-12-25", "2022-01-09","2022-02-08","2022-03-15")),
end   = as.Date(c("2021-12-24", "2022-01-08", "2022-02-07","2022-03-14","2022-05-26"))
)
# map Rt estimates to actual calendar dates
Rt_df <- res$R %>%
mutate(date = incidence_df$date[t_end])
# merge incidence counts
Rt_df <- Rt_df %>%
left_join(incidence_df, by = "date") %>%
dplyr::rename(cases = I)
# assign Rt values to intervention periods using fuzzy join
Rt_df <- Rt_df %>%
fuzzy_left_join(
interventions,
by = c("date" = "start", "date" = "end"),
match_fun = list(`>=`, `<=`)
) %>%
select(date,`Mean(R)`, cases, period)
# case-weighted average Rt + min/max per period
summary_Rt <- Rt_df %>%
filter(!is.na(period)) %>%
group_by(period) %>%
summarise(
Rt_weighted = sum(`Mean(R)` * cases, na.rm = TRUE) / sum(cases, na.rm = TRUE),
Rt_min = min(`Mean(R)`, na.rm = TRUE),
Rt_max = max(`Mean(R)`, na.rm = TRUE),
.groups = 'drop'
)
summary_Rt
Rt_df$period <- factor(Rt_df$period, levels = names(alert_colors))
ggplot(Rt_df, aes(x = date, y = `Mean(R)`)) +
geom_rect(aes(xmin=ymd('2022-03-14'), xmax = ymd('2022-05-26'), ymin = -Inf, ymax = Inf),
fill = adjustcolor("#F7E2E2", alpha = 0.03), alpha = 0.05) +
geom_rect(aes(xmin=ymd('2022-03-14'), xmax = ymd('2022-05-26'), ymin = -Inf, ymax = Inf),
fill = adjustcolor("#D3D3D3", alpha = 0.03), alpha = 0.05) +
geom_rect(aes(xmin=ymd('2021-12-21'), xmax = ymd('2021-12-24'), ymin = -Inf, ymax = Inf),
fill = adjustcolor("#D98880", alpha = 0.03), alpha = 0.05) +
geom_rect(aes(xmin=ymd('2021-12-24'), xmax = ymd('2022-01-08'), ymin = -Inf, ymax = Inf),
fill = adjustcolor("#66D1B5", alpha = 0.03), alpha = 0.05) +
geom_rect(aes(xmin=ymd('2022-02-07'), xmax = ymd('2022-03-14'), ymin = -Inf, ymax = Inf),
fill = adjustcolor("#FFD580", alpha = 0.03), alpha = 0.05) +
geom_rect(aes(xmin=ymd('2022-01-08'), xmax = ymd('2022-02-07'), ymin = -Inf, ymax = Inf),
fill = adjustcolor("#87CEFA", alpha = 0.03), alpha = 0.05) +
geom_line(lwd = 2) +
scale_color_manual(values = alert_colors, guide = "none") +
theme_clean() +
theme(axis.text.x = element_text(size = 12, angle = 0, hjust = 1, face = "bold"),
axis.title.x = element_text(size = 12, color = "black", face = "bold"),
axis.text.y = element_text(size = 12, face = "bold"),
axis.title.y = element_text(size = 12, color = "black", face = "bold"),
legend.position = c(0.9,0.6),
legend.text = element_text(hjust = 0.25),
plot.title = element_text(hjust = 0.5, face = "bold"),
panel.border = element_blank(),
plot.background = element_blank(),
axis.title = element_text(face = "bold")) +
geom_hline(yintercept = 1, linetype = 6, lwd = 1.3, color = "darkslategrey") +
geom_vline(xintercept = as.Date("2021-12-24"), colour = "gold4", linetype = 2, size = 1)  +
geom_vline(xintercept = as.Date("2022-01-08"), colour = "gold4", linetype = 2, size = 1)  +
geom_vline(xintercept = as.Date("2022-02-07"), colour = "gold4", linetype = 2, size = 1)  +
geom_vline(xintercept = as.Date("2022-03-14"), colour = "black", linetype = 1, size = 1)  +
annotate("text", x = as.Date("2021-12-18"), y = 1.45, label = expression(R[t[2]] == 1.92),size = 4,angle = 90, hjust = 1, color = "black")+
annotate("text", x = as.Date("2022-01-02"), y = 1.8, label = expression(R[t[3]] == 1.34),size = 4,angle = 90, hjust = 1,color = "black", alpha = 1)+
annotate("text", x = as.Date("2022-02-02"), y = 1.3, label = expression(R[t[4]]== 0.97),size = 4,angle = 0, hjust = 1, color = "black",alpha = 1)+
annotate("text", x = as.Date("2022-03-06"), y = 1.5, label = expression(R[t[3][m]] == 1.08),size = 4,angle = 0, hjust = 1, color = "black", alpha = 1)+
annotate("text", x = as.Date("2022-05-01"), y = 1.3, label = expression(R[t[0]] == 1.004),size = 4, hjust = 1, color = "black", alpha = 1)+
annotate("text", x = as.Date("2022-03-02"), y = 1.98, label = "Pre-Cancellation of Public \nHealth Emergency Declaration",size = 4, hjust=1, color = "black")+
annotate("text", x = as.Date("2022-05-18"), y = 1.98, label = "Post Cancellation of Public \nHealth Emergency Declaration",size = 4, hjust=1,color = "black")+
ggtitle(label = expression("Estimated Time-varying " * R[t] * " Across Intervention Periods in NL", subtitle = "")) +
labs(x = "Dates (Dec 15, 2021 -- May 26, 2022)", y =  expression("" * R[t] * " "))
vaccination_coverage <- read.csv("~/Documents/MUN/Thesis Samples/SEARCH-ID-MODEL/searchid/macpan2/data/vaccination-coverage-map.csv")
vaccination_coverage$week_end <- as.Date(vaccination_coverage$week_end, format = "%Y-%m-%d")
vaccination_coverage <- vaccination_coverage[(vaccination_coverage$prename == "Newfoundland and Labrador") & ((vaccination_coverage$week_end >= "2021-12-11") & (vaccination_coverage$week_end < "2022-06-20")),]
vaccination_coverage <- vaccination_coverage[c("week_end","proptotal_atleast1dose","proptotal_fully","proptotal_1additional")] #
# Convert `proptotal_fully` to numeric
vaccination_data <- vaccination_coverage %>%
mutate(proptotal_fully = as.numeric(proptotal_fully),
proptotal_1additional = as.numeric(proptotal_1additional),
proptotal_atleast1dose = as.numeric(proptotal_atleast1dose)) %>%
mutate(rate_atleast1dose_vaccinated = c(NA, diff(proptotal_atleast1dose)),
rate_fully_vaccinated = c(NA, diff(proptotal_fully)),      # Weekly change in full vaccination
rate_booster = c(NA, diff(proptotal_1additional)),         # Weekly change in booster uptake
cumulative_fully_vaccinated = cumsum(replace_na(rate_fully_vaccinated, 0)),  # Cumulative sum
cumulative_booster = cumsum(replace_na(rate_booster, 0)),
cumulative_atleast1dose = cumsum(replace_na(rate_atleast1dose_vaccinated, 0)))  # Cumulative sum
# Plot 1: Vaccination Coverage Over Time ----
p1 <- ggplot(vaccination_data, aes(x = week_end)) +
geom_line(aes(y = proptotal_atleast1dose, color = "At Least 1 Dose")) +
geom_point(aes(y = proptotal_atleast1dose, color = "At Least 1 Dose"), size = 5) +
geom_line(aes(y = proptotal_fully, color = "Fully Vaccinated (Double Dose)")) +
geom_point(aes(y = proptotal_fully, color = "Fully Vaccinated (Double Dose)"), size = 5) +
geom_line(aes(y = proptotal_1additional, color = "Booster Dose")) +
geom_point(aes(y = proptotal_1additional, color = "Booster Dose"), size = 5) +
scale_color_manual(values = c("At Least 1 Dose" = "blue",
"Fully Vaccinated (Double Dose)" = "red",
"Booster Dose" = "darkgreen")) +
labs(title = "COVID-19 Vaccination Coverage Proportions in Newfoundland and Labrador",
x = "Date",
y = "Percentage of Population (%)",
color = "Legend") +
theme_clean() +
theme(axis.text.x = element_text(size = 18, angle = 0, hjust = 0.5),
axis.title.x = element_text(size = 18, color = "black", face = "bold"),
axis.text.y = element_text(size = 18),
axis.title.y = element_text(size = 18, color = "black", face = "bold"),
plot.title = element_text(size = 18, face = "bold", color = "black", hjust = 0.5),
legend.position = "bottom",
legend.title = element_text(size = 0),
legend.text = element_text(size = 18),
legend.background = element_rect(color = NA),
legend.margin = margin(0, 0, 0, 0),
plot.background = element_blank())
# Plot 2: Rate of Change in Vaccination Uptake ----
p2 <- ggplot(vaccination_data, aes(x = week_end)) +
geom_line(aes(y = rate_atleast1dose_vaccinated, color = "Rate of At Least 1 Dose"), size = 1) +
geom_point(aes(y = rate_atleast1dose_vaccinated, color = "Rate of At Least 1 Dose"), size = 5) +
geom_line(aes(y = rate_fully_vaccinated, color = "Rate of Fully Vaccinated"), size = 1) +
geom_point(aes(y = rate_fully_vaccinated, color = "Rate of Fully Vaccinated"), size = 5) +
geom_line(aes(y = rate_booster, color = "Rate of Booster Uptake"), size = 1) +
geom_point(aes(y = rate_booster, color = "Rate of Booster Uptake"), size = 5) +
scale_color_manual(values = c("Rate of At Least 1 Dose" = "blue",
"Rate of Fully Vaccinated" = "red",
"Rate of Booster Uptake" = "darkgreen")
) +
labs(title = "Rate of Change in COVID-19 Vaccination Proportions", x = "Date",y = "Rate of Change (%)",color = "") +
theme_clean() +
theme(axis.text.x = element_text(size = 18, angle = 0, hjust = 0.5),
axis.title.x = element_text(size = 18, color = "black", face = "bold"),
axis.text.y = element_text(size = 18),
axis.title.y = element_text(size = 18, color = "black", face = "bold"),
plot.title = element_text(size = 18, face = "bold", color = "black", hjust = 0.5),
legend.position = "bottom",
legend.title = element_text(size = 0),
legend.text = element_text(size = 18),
legend.background = element_rect(color = NA),
legend.margin = margin(0, 0, 0, 0),
plot.background = element_blank())
vac_coverage <- plot_grid(p1, p2, ncol = 2, labels=c("C", "D"),align = "hv", label_size = 30)
vac_coverage
beta_summary <- aggregate(beta ~ alert_level, data = model_fit_data_const,
FUN = function(x) c(mean_value = mean(x), sd_value = sd(x)))
beta_summary <- do.call(data.frame, beta_summary)
names(beta_summary) <- c("alert_level", "mean_value", "sd_value")
desired_order <- c("No-ALS", "ALS-2", "ALS-3", "Mod-ALS-3", "ALS-4")
beta_summary$alert_level <- factor(beta_summary$alert_level, levels = desired_order)
alert_errorplot <- ggplot(beta_summary, aes(x = alert_level, y = mean_value, color = alert_level)) +
geom_errorbar(aes(ymin = mean_value - sd_value, ymax = mean_value + sd_value),
width = 0.15, position = position_dodge(width = 0.2), show.legend = FALSE,size = 1) +
geom_point(size = 3,position = position_dodge(width = 0.5), show.legend = FALSE) +
geom_text(aes(label = round(mean_value, 2)), vjust = 0.5, hjust = -0.38, color = "black", size = 2.5) +
labs(title = "Alert Levels' Mean Transmission Rate ", x = "Alert Levels", y = expression(""*beta*"")) +
scale_color_manual(values = alert_colors, guide = "none") +
theme_clean() +
theme(
axis.text.x = element_text(size = 8, hjust = 0.5, angle = 0),
axis.title.x = element_text(size = 8, color = "black", face = "bold"),
axis.text.y = element_text(size = 8),
axis.title.y = element_text(size = 10, color = "black", face = "bold"),
plot.title = element_text(size = 8, face = "bold", color = "black", hjust = 0.5),
legend.position = element_blank(),
panel.border = element_blank(),
plot.background = element_blank()
)
alert_errorplot
packageVersion("macpan2")
repos = c('https://canmod.r-universe.dev', 'https://cloud.r-project.org')
install.packages('macpan2', repos = repos)
packageVersion("macpan2")
exit()
quit()
